--- GeckoLayerClient.java
+++ GeckoLayerClient.java
@@ -157,49 +145,47 @@ public abstract class GeckoLayerClient i
             return null;
         }
 
 
         // Make sure we don't spend time painting areas we aren't interested in.
         // Only do this if the Gecko viewport isn't going to override our viewport.
         Rect bufferRect = new Rect(0, 0, width, height);
 
-        if (!mUpdateViewportOnEndDraw) {
-            // First, find out our ideal displayport. We do this by taking the
-            // clamped viewport origin and taking away the optimum viewport offset.
-            // This would be what we would send to Gecko if adjustViewport were
-            // called now.
-            ViewportMetrics currentMetrics = mLayerController.getViewportMetrics();
-            PointF currentBestOrigin = RectUtils.getOrigin(currentMetrics.getClampedViewport());
-            PointF viewportOffset = currentMetrics.getOptimumViewportOffset(new IntSize(width, height));
-            currentBestOrigin.offset(-viewportOffset.x, -viewportOffset.y);
+        // First, find out our ideal displayport. We do this by taking the
+        // clamped viewport origin and taking away the optimum viewport offset.
+        // This would be what we would send to Gecko if adjustViewport were
+        // called now.
+        ViewportMetrics currentMetrics = mLayerController.getViewportMetrics();
+        PointF currentBestOrigin = RectUtils.getOrigin(currentMetrics.getClampedViewport());
+        PointF viewportOffset = currentMetrics.getOptimumViewportOffset(new IntSize(width, height));
+        currentBestOrigin.offset(-viewportOffset.x, -viewportOffset.y);
 
-            Rect currentRect = RectUtils.round(new RectF(currentBestOrigin.x, currentBestOrigin.y,
-                                                         currentBestOrigin.x + width, currentBestOrigin.y + height));
+        Rect currentRect = RectUtils.round(new RectF(currentBestOrigin.x, currentBestOrigin.y,
+                                                     currentBestOrigin.x + width, currentBestOrigin.y + height));
 
-            // Second, store Gecko's displayport.
-            PointF currentOrigin = mNewGeckoViewport.getDisplayportOrigin();
-            bufferRect = RectUtils.round(new RectF(currentOrigin.x, currentOrigin.y,
-                                                   currentOrigin.x + width, currentOrigin.y + height));
+        // Second, store Gecko's displayport.
+        PointF currentOrigin = mGeckoViewport.getDisplayportOrigin();
+        bufferRect = RectUtils.round(new RectF(currentOrigin.x, currentOrigin.y,
+                                               currentOrigin.x + width, currentOrigin.y + height));
 
 
-            // Take the intersection of the two as the area we're interested in rendering.
-            if (!bufferRect.intersect(currentRect)) {
-                // If there's no intersection, we have no need to render anything,
-                // but make sure to update the viewport size.
-                mTileLayer.beginTransaction(mLayerController.getView());
-                try {
-                    updateViewport(true);
-                } finally {
-                    mTileLayer.endTransaction();
-                }
-                return null;
+        // Take the intersection of the two as the area we're interested in rendering.
+        if (!bufferRect.intersect(currentRect)) {
+            // If there's no intersection, we have no need to render anything,
+            // but make sure to update the viewport size.
+            mTileLayer.beginTransaction(mLayerController.getView());
+            try {
+                updateViewport();
+            } finally {
+                mTileLayer.endTransaction();
             }
-            bufferRect.offset(Math.round(-currentOrigin.x), Math.round(-currentOrigin.y));
+            return null;
         }
+        bufferRect.offset(Math.round(-currentOrigin.x), Math.round(-currentOrigin.y));
 
         mTileLayer.beginTransaction(mLayerController.getView());
 
         // Be sure to adjust the buffer size; if it's not at least as large as the viewport size,
         // ViewportMetrics.getOptimumViewportOffset() gets awfully confused and severe display
         // corruption results!
         if (mBufferSize.width != width || mBufferSize.height != height) {
             mBufferSize = new IntSize(width, height);
